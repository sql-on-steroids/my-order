MODULE Import;

REQUIRE Utils, Settings, Data;

importResult = DATA LOCAL BOOLEAN ();

importCatalog(FILE file) {
  // Загружаем каталог из файла
  LOCAL groupName = ISTRING[100] (INTEGER);
  LOCAL skuID = STRING[11] (INTEGER);
  LOCAL skuName = ISTRING[100] (INTEGER);
  LOCAL countryID = STRING[2] (INTEGER);
  LOCAL manufacturerName = ISTRING[100] (INTEGER);
  LOCAL packing = INTEGER (INTEGER);
  LOCAL onSale = STRING[1] (INTEGER);
  LOCAL price = NUMERIC[10,2] (INTEGER);
  IMPORT FROM file TO groupName, skuID, skuName, countryID, manufacturerName, packing, onSale, price;
  // Обновляем справочники
  FOR [GROUP MAX INTEGER i BY groupName(i)](ISTRING[100] name) 
    AND name != 'Group' AND NOT groupByName(name) 
    NEW g = Group DO {
      name(g) <- name;
    }
  FOR [GROUP MAX INTEGER i BY countryID(i)](STRING[2] id) 
    AND id != 'Country' AND NOT countryByID(id) 
    NEW c = Country DO {
      id(c) <- id;
    }
  FOR [GROUP MAX INTEGER i BY manufacturerName(i)](ISTRING[100] name) 
    AND name != 'Manufacturer' AND NOT manufacturerByName(name) 
    NEW m = Manufacturer DO {
      name(m) <- name;
    }
  // Создаём новые товары
  FOR skuID(INTEGER i) AND (skuID(i) != 'SKU') // Ошибочно захватывает заголовки в Excel-файле
    AND NOT skuByID(skuID(i)) NEW u = SKU
  DO {
    id(u) <- skuID(i);
  }
  // Обновляем каталог товаров
  FOR id(SKU u) == skuID(INTEGER i) DO {
    name(u) <- skuName(i);
    group(u) <- groupByName(groupName(i));
    country(u) <- countryByID(countryID(i));
    manufacturer(u) <- manufacturerByName(manufacturerName(i));
    packing(u) <- packing(i);
    onSale(u) <- BOOLEAN(onSale(i));
    price(u) <- price(i);
    deleted(u) <- NULL;
  }
  // Пометим все старые товары на удаление
  deleted(SKU u) <- TRUE WHERE u IS SKU AND NOT [GROUP SUM 1 BY skuID(INTEGER i)](id(u));
  importResult() <- TRUE;
}

importCustomer(FILE file) {
  // Загружаем список покупателей из файла
  LOCAL id = STRING[9] (INTEGER);
  LOCAL name = ISTRING[100] (INTEGER);
  IMPORT FROM file TO id, name;
  // Создаём новых покупателей
  FOR id(INTEGER i) AND (id(i) != 'ID') // Ошибочно захватывает заголовки в Excel-файле
    AND NOT customerByID(id(i)) NEW c = Customer
  DO {
    id(c) <- id(i);
  }
  // Обновляем информацию о покупателях
  FOR id(Customer c) == id(INTEGER i) DO {
    name(c) <- name(i);
  }
  importResult() <- TRUE;
}

impID = DATA LOCAL LONG ();
impNo = DATA LOCAL STRING[11] ();
impResult = DATA LOCAL BOOLEAN ();
impMessage = DATA LOCAL ISTRING[255] ();

FORM orderResultForm
  PROPERTIES() id = impID, no = impNo, result = impResult, message = impMessage  
;

importOrderResult(FILE file) { 
  // Загружаем результат обработки заказа в учётной системе
  IMPORT orderResultForm FROM file;
  LOCAL order = Order ();
  order() <- GROUP MAX o IF o IS Order AND LONG(o) = impID();
  IF order() THEN {
    no(order()) <- impNo();
    status(order()) <- IF impResult() THEN Status.Processed ELSE Status.Rejected;    
    answer(order()) <- impMessage();
    importResult() <- TRUE;
  } ELSE 
    importResult() <- NULL;
}

importFiles() {
  listFiles(exchangeFolder() + '/in/');
  FOR ISTRING[255] f = fileName(INTEGER j) AND NOT fileIsDirectory(j) DO NEWSESSION {
    importResult() <- NULL;
    LOCAL file = FILE ();
    READ exchangeFolder() + '/in/' + f TO file;
    IF istartsWith(f, 'catalog') THEN // catalog.xlsx, catalog.xls или catalog.json
      importCatalog(file());
    ELSE IF istartsWith(f, 'customer') THEN // customer.xlsx, customer.xls или customer.json
      importCustomer(file());
    ELSE IF istartsWith(f, 'order result') THEN // "order result NNNN.json"
      importOrderResult(file());
    LOCAL subFolder = ISTRING[4] ();
    subFolder() <- IF importResult() THEN 'ok/' ELSE 'bad/';
    move(exchangeFolder() + '/in/' + f, exchangeFolder() + '/in/' + subFolder() + f);
    IF importResult() THEN
      APPLY;
  }
}

//!!NAVIGATOR {
//  NEW importFiles;
//}